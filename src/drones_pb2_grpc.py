# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import drones_pb2 as drones__pb2


class GreeterStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.register = channel.unary_unary(
                '/Greeter/register',
                request_serializer=drones__pb2.Registration.SerializeToString,
                response_deserializer=drones__pb2.RegistrationId.FromString,
                )
        self.send_position = channel.unary_unary(
                '/Greeter/send_position',
                request_serializer=drones__pb2.Position.SerializeToString,
                response_deserializer=drones__pb2.Empty.FromString,
                )
        self.listen_waypoint = channel.unary_stream(
                '/Greeter/listen_waypoint',
                request_serializer=drones__pb2.Empty.SerializeToString,
                response_deserializer=drones__pb2.Waypoint.FromString,
                )


class GreeterServicer(object):
    """Missing associated documentation comment in .proto file."""

    def register(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def send_position(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def listen_waypoint(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GreeterServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'register': grpc.unary_unary_rpc_method_handler(
                    servicer.register,
                    request_deserializer=drones__pb2.Registration.FromString,
                    response_serializer=drones__pb2.RegistrationId.SerializeToString,
            ),
            'send_position': grpc.unary_unary_rpc_method_handler(
                    servicer.send_position,
                    request_deserializer=drones__pb2.Position.FromString,
                    response_serializer=drones__pb2.Empty.SerializeToString,
            ),
            'listen_waypoint': grpc.unary_stream_rpc_method_handler(
                    servicer.listen_waypoint,
                    request_deserializer=drones__pb2.Empty.FromString,
                    response_serializer=drones__pb2.Waypoint.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Greeter', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Greeter(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Greeter/register',
            drones__pb2.Registration.SerializeToString,
            drones__pb2.RegistrationId.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def send_position(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Greeter/send_position',
            drones__pb2.Position.SerializeToString,
            drones__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def listen_waypoint(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/Greeter/listen_waypoint',
            drones__pb2.Empty.SerializeToString,
            drones__pb2.Waypoint.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
